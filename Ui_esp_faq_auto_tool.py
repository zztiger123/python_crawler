# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/zhengzhong/ZZWORK/FAQ_PLAN/2022/doc_gitlab_test/esp_faq_auto_tool.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import (QWidget, QPushButton, QLineEdit, 
    QInputDialog, QApplication)
import sys
import gitlab



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(930, 712)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.startButton = QtWidgets.QPushButton(self.centralwidget)
        self.startButton.setGeometry(QtCore.QRect(460, 120, 121, 31))
        self.startButton.setObjectName("startButton")
        self.startButton.clicked.connect(self.showStatus)

        self.textEdit_token = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_token.setGeometry(QtCore.QRect(110, 70, 471, 31))
        self.textEdit_token.setObjectName("textEdit_token")
        self.textEdit_token.setToolTip("please refer to the link : https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html")

        self.textBrowser_mrOutput = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_mrOutput.setGeometry(QtCore.QRect(10, 160, 571, 471))
        self.textBrowser_mrOutput.setObjectName("textBrowser_mrOutput")
        self.textEdit_gitlabWebsite = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_gitlabWebsite.setGeometry(QtCore.QRect(110, 20, 471, 31))
        self.textEdit_gitlabWebsite.setObjectName("textEdit_gitlabWebsite")
        self.textEdit_gitlabWebsite.setToolTip("enter gitlab website : for example : https://gitlab.espressif.cn:6688")

        self.label_gitlabWebsite = QtWidgets.QLabel(self.centralwidget)
        self.label_gitlabWebsite.setGeometry(QtCore.QRect(0, 20, 111, 31))
        self.label_gitlabWebsite.setObjectName("label_gitlabWebsite")
        self.label_gitlabWebsite.setToolTip("enter gitlab website : for example : https://gitlab.espressif.cn:6688")

        self.label_token = QtWidgets.QLabel(self.centralwidget)
        self.label_token.setGeometry(QtCore.QRect(20, 70, 71, 21))
        self.label_token.setObjectName("label_token")
        self.label_token.setToolTip("enter gitlab token , please refer to the link : https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html")

        self.checkBox_reviewer = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_reviewer.setGeometry(QtCore.QRect(600, 80, 92, 23))
        self.checkBox_reviewer.setObjectName("checkBox_reviewer")
        self.checkBox_owner = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_owner.setGeometry(QtCore.QRect(600, 30, 92, 23))
        self.checkBox_owner.setObjectName("checkBox_owner")
        self.checkBox_open = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_open.setGeometry(QtCore.QRect(600, 120, 92, 23))
        self.checkBox_open.setObjectName("checkBox_open")
        self.checkBox_open.setChecked(True)

        self.checkBox_merged = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_merged.setGeometry(QtCore.QRect(690, 120, 92, 23))
        self.checkBox_merged.setObjectName("checkBox_merged")
        self.checkBox_closed = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_closed.setGeometry(QtCore.QRect(790, 120, 92, 23))
        self.checkBox_closed.setObjectName("checkBox_closed")
        self.textEdit_owner = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_owner.setGeometry(QtCore.QRect(690, 30, 131, 31))
        self.textEdit_owner.setObjectName("textEdit_owner")
        self.textEdit_reviewer = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_reviewer.setGeometry(QtCore.QRect(690, 80, 131, 31))
        self.textEdit_reviewer.setObjectName("textEdit_reviewer")
        self.clearButton = QtWidgets.QPushButton(self.centralwidget)
        self.clearButton.setGeometry(QtCore.QRect(10, 635, 91, 31))
        self.clearButton.setObjectName("clearButton")
        self.clearButton.clicked.connect(self.clearStatus)

        self.label_total = QtWidgets.QLabel(self.centralwidget)
        self.label_total.setGeometry(QtCore.QRect(440, 641, 51, 17))
        self.label_total.setObjectName("label_total")
        self.textBrowser_total = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_total.setGeometry(QtCore.QRect(490, 635, 91, 31))
        self.textBrowser_total.setObjectName("textBrowser_total")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(590, 154, 331, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_overallSituation = QtWidgets.QLabel(self.centralwidget)
        self.label_overallSituation.setGeometry(QtCore.QRect(590, 170, 231, 21))
        self.label_overallSituation.setObjectName("label_overallSituation")
        self.label_projectId = QtWidgets.QLabel(self.centralwidget)
        self.label_projectId.setGeometry(QtCore.QRect(10, 120, 71, 21))
        self.label_projectId.setObjectName("label_projectId")
        self.textEdit_projectId = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_projectId.setGeometry(QtCore.QRect(110, 120, 101, 31))
        self.textEdit_projectId.setObjectName("textEdit_projectId")
        self.label_note1 = QtWidgets.QLabel(self.centralwidget)
        self.label_note1.setGeometry(QtCore.QRect(220, 130, 241, 17))
        self.label_note1.setObjectName("label_note1")
        self.label_currOpen = QtWidgets.QLabel(self.centralwidget)
        self.label_currOpen.setGeometry(QtCore.QRect(590, 200, 221, 17))
        self.label_currOpen.setObjectName("label_currOpen")
        self.textBrowser_currOpenMr = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_currOpenMr.setGeometry(QtCore.QRect(800, 190, 91, 31))
        self.textBrowser_currOpenMr.setObjectName("textBrowser_currOpenMr")
        self.label_currMerged = QtWidgets.QLabel(self.centralwidget)
        self.label_currMerged.setGeometry(QtCore.QRect(590, 480, 221, 17))
        self.label_currMerged.setObjectName("label_currMerged")
        self.textBrowser_currMergedMr = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_currMergedMr.setGeometry(QtCore.QRect(800, 470, 91, 31))
        self.textBrowser_currMergedMr.setObjectName("textBrowser_currMergedMr")
        self.lable_cgh = QtWidgets.QLabel(self.centralwidget)
        self.lable_cgh.setGeometry(QtCore.QRect(610, 230, 111, 21))
        self.lable_cgh.setObjectName("lable_cgh")
        self.lcdNumber_cgh = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_cgh.setGeometry(QtCore.QRect(710, 230, 64, 23))
        self.lcdNumber_cgh.setObjectName("lcdNumber_cgh")
        self.label_jyf = QtWidgets.QLabel(self.centralwidget)
        self.label_jyf.setGeometry(QtCore.QRect(610, 270, 111, 21))
        self.label_jyf.setObjectName("label_jyf")
        self.lcdNumber_jyf = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_jyf.setGeometry(QtCore.QRect(710, 270, 64, 23))
        self.lcdNumber_jyf.setObjectName("lcdNumber_jyf")
        self.label_lj = QtWidgets.QLabel(self.centralwidget)
        self.label_lj.setGeometry(QtCore.QRect(610, 310, 111, 21))
        self.label_lj.setObjectName("label_lj")
        self.lcdNumber_lj = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_lj.setGeometry(QtCore.QRect(710, 310, 64, 23))
        self.lcdNumber_lj.setObjectName("lcdNumber_lj")
        self.label_ml = QtWidgets.QLabel(self.centralwidget)
        self.label_ml.setGeometry(QtCore.QRect(610, 350, 111, 21))
        self.label_ml.setObjectName("label_ml")
        self.lcdNumber_ml = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_ml.setGeometry(QtCore.QRect(710, 350, 64, 23))
        self.lcdNumber_ml.setObjectName("lcdNumber_ml")
        self.label_zz = QtWidgets.QLabel(self.centralwidget)
        self.label_zz.setGeometry(QtCore.QRect(610, 390, 111, 21))
        self.label_zz.setObjectName("label_zz")
        self.lcdNumber_zz = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_zz.setGeometry(QtCore.QRect(710, 390, 64, 23))
        self.lcdNumber_zz.setObjectName("lcdNumber_zz")
        self.label_xhx = QtWidgets.QLabel(self.centralwidget)
        self.label_xhx.setGeometry(QtCore.QRect(610, 430, 111, 21))
        self.label_xhx.setObjectName("label_xhx")
        self.lcdNumber_xhx = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_xhx.setGeometry(QtCore.QRect(710, 430, 64, 23))
        self.lcdNumber_xhx.setObjectName("lcdNumber_xhx")

        self.inquireButton = QtWidgets.QPushButton(self.centralwidget)
        self.inquireButton.setGeometry(QtCore.QRect(590, 510, 301, 31))
        self.inquireButton.setObjectName("inquireButton")
        self.inquireButton.clicked.connect(self.inquireStatus)

        self.progressBar_cgh = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar_cgh.setGeometry(QtCore.QRect(790, 230, 118, 23))
        self.progressBar_cgh.setProperty("value", 0)
        self.progressBar_cgh.setObjectName("progressBar_cgh")
        self.progressBar_jyf = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar_jyf.setGeometry(QtCore.QRect(790, 270, 118, 23))
        self.progressBar_jyf.setProperty("value", 0)
        self.progressBar_jyf.setObjectName("progressBar_jyf")
        self.progressBar_lj = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar_lj.setGeometry(QtCore.QRect(790, 310, 118, 23))
        self.progressBar_lj.setProperty("value", 0)
        self.progressBar_lj.setObjectName("progressBar_lj")
        self.progressBar_ml = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar_ml.setGeometry(QtCore.QRect(790, 350, 118, 23))
        self.progressBar_ml.setProperty("value", 0)
        self.progressBar_ml.setObjectName("progressBar_ml")
        self.progressBar_zz = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar_zz.setGeometry(QtCore.QRect(790, 390, 118, 23))
        self.progressBar_zz.setProperty("value", 0)
        self.progressBar_zz.setObjectName("progressBar_zz")
        self.progressBar_xhx = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar_xhx.setGeometry(QtCore.QRect(790, 430, 118, 23))
        self.progressBar_xhx.setProperty("value", 0)
        self.progressBar_xhx.setObjectName("progressBar_xhx")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 933, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.startButton.setText(_translate("MainWindow", "Start"))
        self.label_gitlabWebsite.setText(_translate("MainWindow", "Gitlab website"))
        self.label_token.setText(_translate("MainWindow", "Token"))
        self.checkBox_reviewer.setText(_translate("MainWindow", "Reviewer"))
        self.checkBox_owner.setText(_translate("MainWindow", "Owner"))
        self.checkBox_open.setText(_translate("MainWindow", "Open"))
        self.checkBox_merged.setText(_translate("MainWindow", "Merged"))
        self.checkBox_closed.setText(_translate("MainWindow", "Closed"))
        self.clearButton.setText(_translate("MainWindow", "Clear"))
        self.label_total.setText(_translate("MainWindow", "Total :"))
        self.label_overallSituation.setText(_translate("MainWindow", "ESP-FAQ Overall situation"))
        self.label_projectId.setText(_translate("MainWindow", "Project id"))
        self.label_note1.setText(_translate("MainWindow", "Note: ID 1715 by default"))
        self.label_currOpen.setText(_translate("MainWindow", "1. Current open MR number"))
        self.label_currMerged.setText(_translate("MainWindow", "2. Current merged MR number"))
        self.lable_cgh.setText(_translate("MainWindow", "Cai guanhong"))
        self.label_jyf.setText(_translate("MainWindow", "Jiang yafeng"))
        self.label_lj.setText(_translate("MainWindow", "Liu jia"))
        self.label_ml.setText(_translate("MainWindow", "Ma li"))
        self.label_zz.setText(_translate("MainWindow", "Zheng zhong"))
        self.label_xhx.setText(_translate("MainWindow", "Xie hanxin(AE)"))
        self.inquireButton.setText(_translate("MainWindow", "Inquire"))

    def showStatus(self):
        self.clearStatus()
        url = self.textEdit_gitlabWebsite.toPlainText()
        token = self.textEdit_token.toPlainText()

        # url = 'https://gitlab.espressif.cn:6688' # https://gitlab.espressif.cn:6688/ae_group/esp-faq
        # token = 'yh2cyC1yjta4bwBLJZz9'

        if url and token:
            # 登录  
            gl = gitlab.Gitlab(url, token)

            try:
                #  显示第一页 project
                projects = gl.projects.list()   
            except:
                self.textBrowser_mrOutput.insertPlainText('invalid url or token, access gitlab failed!\n')
                QApplication.processEvents()
            else:
                self.textBrowser_mrOutput.insertPlainText('access gitlab success!\n')
                QApplication.processEvents()
                projectIdByDef = 1715

                projectIdNew = self.textEdit_projectId.toPlainText()

                if projectIdNew:
                    projectId = projectIdNew
                else:
                    projectId = projectIdByDef
                
                try:
                    # 通过指定id 获取 project 对象
                    project = gl.projects.get(projectId) # esp-faq 1715
                except:
                    self.textBrowser_mrOutput.insertPlainText('invalid project id, access project failed!\n')
                    QApplication.processEvents()
                else: 
                    self.textBrowser_mrOutput.insertPlainText('access project success!\n')
                    QApplication.processEvents()
                    curState, reviewer, owner = None, None,None

                    if self.checkBox_reviewer.isChecked():
                        reviewer = self.textEdit_reviewer.toPlainText()
                    
                    if self.checkBox_owner.isChecked():
                        owner = self.textEdit_owner.toPlainText()

                    state_cnt = 0

                    if self.checkBox_open.isChecked():
                        curState = 'opened'
                        state_cnt +=1

                    if self.checkBox_merged.isChecked():
                        curState = 'merged'
                        state_cnt +=1
                    
                    if self.checkBox_closed.isChecked():
                        curState = 'closed'
                        state_cnt +=1
                    
                    if state_cnt > 1:
                        self.textBrowser_mrOutput.insertPlainText('More than one state (open, merged, closed) is selected at the same time! At this time, the selected state changes to the default opened.\n')
                        QApplication.processEvents()
                    elif state_cnt == 0:
                        self.textBrowser_mrOutput.insertPlainText('No state is selected (open, merged, closed)! At this time, the selected state changes to all states displayed.\n')
                        QApplication.processEvents()

                    mrs = project.mergerequests.list(state=curState, reviewer_username=reviewer, author_username=owner, all=True) 

                    mr_count = 0

                    for mr in mrs:
                        self.textBrowser_mrOutput.insertPlainText(str(mr.web_url))
                        self.textBrowser_mrOutput.insertPlainText('\r\n')
                        QApplication.processEvents()
                        mr_count += 1

                    self.textBrowser_total.insertPlainText(str(mr_count))

        else:
            self.textBrowser_mrOutput.insertPlainText('url or token is null!\n')
            QApplication.processEvents()

    def inquireStatus(self):
        self.clearStatus()
        url = self.textEdit_gitlabWebsite.toPlainText()
        token = self.textEdit_token.toPlainText()

        # url = 'https://gitlab.espressif.cn:6688' # https://gitlab.espressif.cn:6688/ae_group/esp-faq
        # token = 'yh2cyC1yjta4bwBLJZz9'

        if url and token:
            # 登录  
            gl = gitlab.Gitlab(url, token)

            try:
                #  显示第一页 project
                projects = gl.projects.list()   
            except:
                self.textBrowser_mrOutput.insertPlainText('invalid url or token, access gitlab failed!\n')
                QApplication.processEvents()
            else:
                self.textBrowser_mrOutput.insertPlainText('access gitlab success!\n')
                QApplication.processEvents()
                projectIdByDef = 1715

                projectIdNew = self.textEdit_projectId.toPlainText()

                if projectIdNew:
                    projectId = projectIdNew
                else:
                    projectId = projectIdByDef
                
                try:
                    # 通过指定id 获取 project 对象
                    project = gl.projects.get(projectId) # esp-faq 1715
                except:
                    self.textBrowser_mrOutput.insertPlainText('invalid project id, access  failed!\n')
                    QApplication.processEvents()
                else: 
                    self.textBrowser_mrOutput.insertPlainText('access project success!\n')
                    QApplication.processEvents()
                    self.textBrowser_mrOutput.insertPlainText('It takes a few seconds to start querying the statistics FAQ status. Please wait!\n')
                    QApplication.processEvents()
                    mrs = project.mergerequests.list(state='opened', all=True) 
                    mr_count_open = 0
                    for mr in mrs:
                        mr_count_open += 1
                    self.textBrowser_mrOutput.insertPlainText('total opened mr = ' + str(mr_count_open) + '!\n')
                    self.textBrowser_currOpenMr.insertPlainText(str(mr_count_open))
                    QApplication.processEvents()

                    mrs = project.mergerequests.list(state='opened', author_username='caiguanhong', all=True) 
                    mr_count_cgh = 0
                    for mr in mrs:
                        mr_count_cgh += 1
                    self.textBrowser_mrOutput.insertPlainText('Cai guanhong : opened mr = ' + str(mr_count_cgh) + '!\n')
                    self.lcdNumber_cgh.display(str(mr_count_cgh))
                    self.progressBar_cgh.setValue(int(mr_count_cgh/mr_count_open * 100))
                    QApplication.processEvents()

                    mrs = project.mergerequests.list(state='opened', author_username='jiangyafeng', all=True) 
                    mr_count_jyf = 0
                    for mr in mrs:
                        mr_count_jyf += 1
                    self.textBrowser_mrOutput.insertPlainText('Jiang yafeng : opened mr = ' + str(mr_count_jyf) + '!\n')
                    self.lcdNumber_jyf.display(str(mr_count_jyf))
                    self.progressBar_jyf.setValue(int(mr_count_jyf/mr_count_open * 100))
                    QApplication.processEvents()

                    mrs = project.mergerequests.list(state='opened', author_username='liujia', all=True) 
                    mr_count_lj = 0
                    for mr in mrs:
                        mr_count_lj += 1
                    self.textBrowser_mrOutput.insertPlainText('Liu jia : opened mr = ' + str(mr_count_lj) + '!\n')
                    self.lcdNumber_lj.display(str(mr_count_lj))
                    self.progressBar_lj.setValue(int(mr_count_lj/mr_count_open * 100))
                    QApplication.processEvents()

                    mrs = project.mergerequests.list(state='opened', author_username='mali', all=True) 
                    mr_count_ml = 0
                    for mr in mrs:
                        mr_count_ml += 1
                    self.textBrowser_mrOutput.insertPlainText('Ma li : opened mr = ' + str(mr_count_ml) + '!\n')
                    self.lcdNumber_ml.display(str(mr_count_ml))
                    self.progressBar_ml.setValue(int(mr_count_ml/mr_count_open * 100))
                    QApplication.processEvents()

                    mrs = project.mergerequests.list(state='opened', author_username='zhengzhong', all=True) 
                    mr_count_zz = 0
                    for mr in mrs:
                        mr_count_zz += 1
                    self.textBrowser_mrOutput.insertPlainText('Zheng zhong : opened mr = ' + str(mr_count_zz) + '!\n')
                    self.lcdNumber_zz.display(str(mr_count_zz))
                    self.progressBar_zz.setValue(int(mr_count_zz/mr_count_open * 100))
                    QApplication.processEvents()

                    mrs = project.mergerequests.list(state='opened', author_username='xiehanxin', all=True) 
                    mr_count_xhx = 0
                    for mr in mrs:
                        mr_count_xhx += 1
                    self.textBrowser_mrOutput.insertPlainText('Xie hanxin(AE) : opened mr = ' + str(mr_count_xhx) + '!\n')
                    self.lcdNumber_xhx.display(str(mr_count_xhx))
                    self.progressBar_xhx.setValue(int(mr_count_xhx/mr_count_open * 100))
                    QApplication.processEvents()

                    mrs = project.mergerequests.list(state='merged', all=True) 
                    mr_count_merged = 0
                    for mr in mrs:
                        mr_count_merged += 1
                    self.textBrowser_mrOutput.insertPlainText('total merged mr = ' + str(mr_count_merged) + '!\n')
                    self.textBrowser_currMergedMr.insertPlainText(str(mr_count_merged))
                    QApplication.processEvents()


        else:
            self.textBrowser_mrOutput.insertPlainText('url or token is null!\n')
            QApplication.processEvents()


    def clearStatus(self):
        self.textBrowser_mrOutput.clear()
        self.textBrowser_total.clear()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())